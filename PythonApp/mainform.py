# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainform.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets, QtMultimediaWidgets, QtMultimedia
from PyQt5.QtWidgets import QFileDialog, QMessageBox
import ThreadModule
import validators

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(909, 863)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(130, 60, 251, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.txt_link = QtWidgets.QLineEdit(self.centralwidget)
        self.txt_link.setGeometry(QtCore.QRect(370, 60, 331, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.txt_link.setFont(font)
        self.txt_link.setObjectName("txt_link")
        self.btndownload = QtWidgets.QPushButton(self.centralwidget)
        self.btndownload.setGeometry(QtCore.QRect(350, 120, 201, 41))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.btndownload.setFont(font)
        self.btndownload.setAutoFillBackground(False)
        self.btndownload.setStyleSheet("background-color: rgb(170, 255, 255);")
        self.btndownload.setObjectName("btndownload")
        
        #set clicked event for btndownload
        self.btndownload.clicked.connect(self.btn_download_click)
        
        #Video Player
        
        """ self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(10, 250, 881, 481))
        self.widget.setStyleSheet("background-color: rgb(80, 80, 80);")
        self.widget.setObjectName("widget")"""
        
        # create a media player object
        self.media_player = QtMultimedia.QMediaPlayer(None, QtMultimedia.QMediaPlayer.VideoSurface)

        # create a widget to display the video
        self.video_widget = QtMultimediaWidgets.QVideoWidget()

        # set the video display widget for the media player
        self.media_player.setVideoOutput(self.video_widget)
        
        #set position changed and duration changed event for media player
        self.media_player.positionChanged.connect(self.position_changed)
        self.media_player.durationChanged.connect(self.duration_changed)

        # create a slider for seeking through the video
        self.position_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal)
        self.position_slider.setRange(0, self.media_player.duration())
        self.position_slider.sliderMoved.connect(self.MediaPlayer_set_position)
        
        #Play and Stop button
        self.play_button = QtWidgets.QPushButton("Play")
        self.play_button.clicked.connect(self.playvideo)
        self.play_button.setStyleSheet("background-color: rgb(170, 255, 255);")
        
        """ self.btn_play = QtWidgets.QPushButton(self.centralwidget)
        self.btn_play.setGeometry(QtCore.QRect(300, 750, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.btn_play.setFont(font)
        self.btn_play.setObjectName("btn_play")
        self.btn_play.clicked.connect(self.play)
        
        self.btn_pause = QtWidgets.QPushButton(self.centralwidget)
        self.btn_pause.setGeometry(QtCore.QRect(460, 750, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.btn_pause.setFont(font)
        self.btn_pause.setObjectName("btn_pause")  """
        
        # create a layout for the player controls
        control_layout = QtWidgets.QHBoxLayout()
        control_layout.addWidget(self.play_button)
        control_layout.addWidget(self.position_slider)

        # create a widget to hold the video player and the controls
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(10, 250, 881, 481))
        self.widget.setStyleSheet("background-color: rgb(80, 80, 80);")
        self.widget.setObjectName("widget")
        
        layout = QtWidgets.QVBoxLayout(self.widget)
        layout.addWidget(self.video_widget)
        layout.addLayout(control_layout)
            
        self.btn_clipchooser = QtWidgets.QPushButton(self.centralwidget)
        self.btn_clipchooser.setGeometry(QtCore.QRect(90, 120, 201, 41))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.btn_clipchooser.setFont(font)
        self.btn_clipchooser.setAutoFillBackground(False)
        self.btn_clipchooser.setStyleSheet("background-color: rgb(170, 255, 255);")
        self.btn_clipchooser.setObjectName("btn_clipchooser")
        
        #open video event click
        self.btn_clipchooser.clicked.connect(self.openvideo)
        
        self.btn_filechooser = QtWidgets.QPushButton(self.centralwidget)
        self.btn_filechooser.setGeometry(QtCore.QRect(620, 120, 201, 41))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.btn_filechooser.setFont(font)
        self.btn_filechooser.setAutoFillBackground(False)
        self.btn_filechooser.setStyleSheet("background-color: rgb(170, 255, 255);")
        self.btn_filechooser.setObjectName("btn_filechooser")
        
        #set clicked event for btn_filechooser
        self.btn_filechooser.clicked.connect(self.btn_filechooser_click)
        
        
        self.btn_download_multiple = QtWidgets.QPushButton(self.centralwidget)
        self.btn_download_multiple.setGeometry(QtCore.QRect(310, 180, 281, 41))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.btn_download_multiple.setFont(font)
        self.btn_download_multiple.setAutoFillBackground(False)
        self.btn_download_multiple.setStyleSheet("background-color: rgb(242, 94, 53);")
        self.btn_download_multiple.setObjectName("btn_download_multiple")
        self.btn_download_multiple.setEnabled(False)
        
        #set event click for btn_download_multiple
        self.btn_download_multiple.clicked.connect(self.btn_downloadmultiple_click)
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 909, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Download Youtube video application"))
        self.label.setText(_translate("MainWindow", "Duong dan video youtube:"))
        self.btndownload.setText(_translate("MainWindow", "Download"))
        
        """ self.btn_play.setText(_translate("MainWindow", "Play"))
        self.btn_pause.setText(_translate("MainWindow", "Pause")) """
        
        self.btn_clipchooser.setText(_translate("MainWindow", "Clip Chooser"))
        self.btn_filechooser.setText(_translate("MainWindow", "Text File Chooser"))
        self.btn_download_multiple.setText(_translate("MainWindow", "Download multiple videos"))

    def openSaveFileDialog(self):
        fname = QFileDialog.getSaveFileName(None, "Save video",
                                               "", "All Files (*);;All Files (*)",options = QFileDialog.Options())
        if(fname[0]):
            downloadThread = ThreadModule.thread("DownloadThread", 1000, self.txt_link.text(), fname, "single")
            downloadThread.start()
    
    
    def btn_download_click(self):
        if(self.txt_link.text() and validators.url(self.txt_link.text())):
            self.openSaveFileDialog()
        elif(not self.txt_link.text()):
            
            msg = QMessageBox()
        
            # setting message for Message Box
            msg.setText("Link is required to download video")
            
            # setting Message box window title
            msg.setWindowTitle("Warning MessageBox")
            
            # declaring buttons on Message Box
            msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
            
            # start the app
            retval = msg.exec_()
            if(self.txt_link.text() and not validators.url(self.txt_link.text())):
                msg = QMessageBox()
            
                msg.setText("Link is not valid!")
                
                msg.setWindowTitle("Warning MessageBox")
                
                msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
                
                retval = msg.exec_()
                
        
    def btn_filechooser_click(self):
        self.urlfilename = QFileDialog().getOpenFileName(None,"Select text file which store multiple videos URL","","Text files (*.txt)",options = QFileDialog.Options())
        if(self.urlfilename[0]):
            self.btn_download_multiple.setEnabled(True)
            self.btn_download_multiple.setStyleSheet("background-color: rgb(170, 255, 255);")
            msg = QMessageBox()
            
            msg.setText("Read file successful")
                
            msg.setWindowTitle("Information MessageBox")
                
            msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
                
            retval = msg.exec_()
    
    def btn_downloadmultiple_click(self):
        count = 100
        if(self.urlfilename[0]):
            fname = QFileDialog.getSaveFileName(None, "Save videos",
                                               "", "All Files (*);;All Files (*)",options = QFileDialog.Options())
            if(fname[0]):
                urlfile = open(self.urlfilename[0])
                text = urlfile.readlines()
                for line in text:
                    if(validators.url(line)):
                        downloadThread = ThreadModule.thread("DownloadMultipleVDThread", count, line, fname, "multiple")
                        downloadThread.start()
                        count+=1
                urlfile.close()
                urlfilename = ()
                self.btn_download_multiple.setEnabled(False)
                self.btn_download_multiple.setStyleSheet("background-color: rgb(242, 94, 53);")

    #MEDIA PLAYER
    def openvideo(self):
        # open a file dialog to select a video to play
        videofile = QFileDialog().getOpenFileName(None,"Select video to play","","Videos (*.mp4 *.m4v *.mkv *.avi *.flv)",options = QFileDialog.Options())
        if(videofile):
            video_file_path = videofile[0]
            self.media_player.setMedia(QtMultimedia.QMediaContent(QtCore.QUrl.fromLocalFile(video_file_path)))
            self.media_player.play()
            """ self.setWindowTitle(video_file_path) """

    def playvideo(self):
        num = self.media_player.state()
        if(num == 1):
            self.media_player.pause()
            self.play_button.setText("Play")
        if(num == 2):
            self.media_player.play()
            self.play_button.setText("Stop")
    
    def MediaPlayer_set_position(self, position):
        self.media_player.setPosition(position)
    
    #SLIDER
    def position_changed(self, position):
        self.position_slider.setValue(position)
    
    def duration_changed(self, duration):
        self.position_slider.setRange(0, duration)
    
                
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
